
STOP_WATCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002e2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a54  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000644  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cd  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000196c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000651  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002391  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 24 01 	call	0x248	; 0x248 <main>
  7a:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SEVEN_SEGMENT_DISPLAY_MLX>:
#define SET_BIT(reg,bit) (reg|=(1<<bit))
#define CLR_BIT(reg,bit) (reg&=~(1<<bit))
#define READ_BIT(reg,bit) ((reg>>bit)&1)

void SEVEN_SEGMENT_DISPLAY_MLX (char n)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	const char arr[10]={0X7E,0X0C,0XB6,0X9E,0XCC,0XDA,0XFA,0X0E,0XFF,0XDE};
  96:	9a e0       	ldi	r25, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	9a 95       	dec	r25
  a6:	e1 f7       	brne	.-8      	; 0xa0 <SEVEN_SEGMENT_DISPLAY_MLX+0x1e>
	SET_BIT(PORTC,6);
  a8:	95 b3       	in	r25, 0x15	; 21
  aa:	90 64       	ori	r25, 0x40	; 64
  ac:	95 bb       	out	0x15, r25	; 21
	PORTA=arr[n%10];
  ae:	9d ec       	ldi	r25, 0xCD	; 205
  b0:	89 9f       	mul	r24, r25
  b2:	91 2d       	mov	r25, r1
  b4:	11 24       	eor	r1, r1
  b6:	96 95       	lsr	r25
  b8:	96 95       	lsr	r25
  ba:	96 95       	lsr	r25
  bc:	39 2f       	mov	r19, r25
  be:	33 0f       	add	r19, r19
  c0:	23 2f       	mov	r18, r19
  c2:	22 0f       	add	r18, r18
  c4:	22 0f       	add	r18, r18
  c6:	23 0f       	add	r18, r19
  c8:	82 1b       	sub	r24, r18
  ca:	e1 e0       	ldi	r30, 0x01	; 1
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	ec 0f       	add	r30, r28
  d0:	fd 1f       	adc	r31, r29
  d2:	e8 0f       	add	r30, r24
  d4:	f1 1d       	adc	r31, r1
  d6:	80 81       	ld	r24, Z
  d8:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTC,7);
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	8f 77       	andi	r24, 0x7F	; 127
  de:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	ef e0       	ldi	r30, 0x0F	; 15
  e2:	f7 e2       	ldi	r31, 0x27	; 39
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <SEVEN_SEGMENT_DISPLAY_MLX+0x62>
  e8:	00 c0       	rjmp	.+0      	; 0xea <SEVEN_SEGMENT_DISPLAY_MLX+0x68>
  ea:	00 00       	nop
	_delay_ms(5);
	
	SET_BIT(PORTC,7);
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	85 bb       	out	0x15, r24	; 21
	PORTA=arr[n/10];
  f2:	e1 e0       	ldi	r30, 0x01	; 1
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ec 0f       	add	r30, r28
  f8:	fd 1f       	adc	r31, r29
  fa:	e9 0f       	add	r30, r25
  fc:	f1 1d       	adc	r31, r1
  fe:	80 81       	ld	r24, Z
 100:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTC,6);
 102:	85 b3       	in	r24, 0x15	; 21
 104:	8f 7b       	andi	r24, 0xBF	; 191
 106:	85 bb       	out	0x15, r24	; 21
 108:	8f e0       	ldi	r24, 0x0F	; 15
 10a:	97 e2       	ldi	r25, 0x27	; 39
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <SEVEN_SEGMENT_DISPLAY_MLX+0x8a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <SEVEN_SEGMENT_DISPLAY_MLX+0x90>
 112:	00 00       	nop
	_delay_ms(5);
	
}
 114:	2a 96       	adiw	r28, 0x0a	; 10
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	f8 94       	cli
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	cd bf       	out	0x3d, r28	; 61
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <finish>:

void finish (void)
{
	char x;
	for (x=0;x<4;x++)
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	2a c0       	rjmp	.+84     	; 0x17e <finish+0x58>
	{
		SET_BIT(PORTC,7);
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,6);
 130:	85 b3       	in	r24, 0x15	; 21
 132:	80 64       	ori	r24, 0x40	; 64
 134:	85 bb       	out	0x15, r24	; 21
		PORTA=0X7E;
 136:	8e e7       	ldi	r24, 0x7E	; 126
 138:	8b bb       	out	0x1b, r24	; 27
		SET_BIT(PORTC,5);
 13a:	85 b3       	in	r24, 0x15	; 21
 13c:	80 62       	ori	r24, 0x20	; 32
 13e:	85 bb       	out	0x15, r24	; 21
		PORTB=0xff;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	88 bb       	out	0x18, r24	; 24
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	31 ee       	ldi	r19, 0xE1	; 225
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	30 40       	sbci	r19, 0x00	; 0
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <finish+0x24>
 152:	00 c0       	rjmp	.+0      	; 0x154 <finish+0x2e>
 154:	00 00       	nop
		_delay_ms(200);
		
		CLR_BIT(PORTC,7);
 156:	85 b3       	in	r24, 0x15	; 21
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC,6);
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	8f 7b       	andi	r24, 0xBF	; 191
 160:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC,5);
 162:	85 b3       	in	r24, 0x15	; 21
 164:	8f 7d       	andi	r24, 0xDF	; 223
 166:	85 bb       	out	0x15, r24	; 21
		PORTB=0;
 168:	18 ba       	out	0x18, r1	; 24
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	3d ee       	ldi	r19, 0xED	; 237
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	21 50       	subi	r18, 0x01	; 1
 172:	30 40       	sbci	r19, 0x00	; 0
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <finish+0x4a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <finish+0x54>
 17a:	00 00       	nop
}

void finish (void)
{
	char x;
	for (x=0;x<4;x++)
 17c:	9f 5f       	subi	r25, 0xFF	; 255
 17e:	94 30       	cpi	r25, 0x04	; 4
 180:	a0 f2       	brcs	.-88     	; 0x12a <finish+0x4>
		PORTB=0;
		_delay_ms(120);
		
	}
	
}
 182:	08 95       	ret

00000184 <increament>:

char increament (char i)
{
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	c8 2f       	mov	r28, r24
	char x,new1=i/10,new2=i%10;
 18c:	dd ec       	ldi	r29, 0xCD	; 205
 18e:	8d 9f       	mul	r24, r29
 190:	d1 2d       	mov	r29, r1
 192:	11 24       	eor	r1, r1
 194:	d6 95       	lsr	r29
 196:	d6 95       	lsr	r29
 198:	d6 95       	lsr	r29
 19a:	9d 2f       	mov	r25, r29
 19c:	99 0f       	add	r25, r25
 19e:	89 2f       	mov	r24, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	88 0f       	add	r24, r24
 1a4:	89 0f       	add	r24, r25
 1a6:	1c 2f       	mov	r17, r28
 1a8:	18 1b       	sub	r17, r24
	
	while(1)
	{
		SEVEN_SEGMENT_DISPLAY_MLX(i);
 1aa:	8c 2f       	mov	r24, r28
 1ac:	0e 94 41 00 	call	0x82	; 0x82 <SEVEN_SEGMENT_DISPLAY_MLX>
		
		for (x=0;x<20;x++)
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	3c c0       	rjmp	.+120    	; 0x22c <increament+0xa8>
		{
			if(READ_BIT(PIND,2)==0)
 1b4:	82 99       	sbic	0x10, 2	; 16
 1b6:	12 c0       	rjmp	.+36     	; 0x1dc <increament+0x58>
 1b8:	ef e0       	ldi	r30, 0x0F	; 15
 1ba:	f7 e2       	ldi	r31, 0x27	; 39
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <increament+0x38>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <increament+0x3e>
 1c2:	00 00       	nop
			{
				_delay_ms(5); //<<< 2
				while (READ_BIT(PIND,2)==0);
 1c4:	82 9b       	sbis	0x10, 2	; 16
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <increament+0x40>
 1c8:	ef e0       	ldi	r30, 0x0F	; 15
 1ca:	f7 e2       	ldi	r31, 0x27	; 39
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <increament+0x48>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <increament+0x4e>
 1d2:	00 00       	nop
				_delay_ms(5);//<<<2
				new1++;
 1d4:	df 5f       	subi	r29, 0xFF	; 255
				if(new1==10)
 1d6:	da 30       	cpi	r29, 0x0A	; 10
 1d8:	09 f4       	brne	.+2      	; 0x1dc <increament+0x58>
				new1=0;
 1da:	d0 e0       	ldi	r29, 0x00	; 0
			}
			if(READ_BIT(PIND,3)==0)
 1dc:	83 99       	sbic	0x10, 3	; 16
 1de:	12 c0       	rjmp	.+36     	; 0x204 <increament+0x80>
 1e0:	ef e0       	ldi	r30, 0x0F	; 15
 1e2:	f7 e2       	ldi	r31, 0x27	; 39
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <increament+0x60>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <increament+0x66>
 1ea:	00 00       	nop
			{
				_delay_ms(5);
				while (READ_BIT(PIND,3)==0);
 1ec:	83 9b       	sbis	0x10, 3	; 16
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <increament+0x68>
 1f0:	ef e0       	ldi	r30, 0x0F	; 15
 1f2:	f7 e2       	ldi	r31, 0x27	; 39
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <increament+0x70>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <increament+0x76>
 1fa:	00 00       	nop
				_delay_ms(5);
				new2++;
 1fc:	1f 5f       	subi	r17, 0xFF	; 255
				if(new2==10)
 1fe:	1a 30       	cpi	r17, 0x0A	; 10
 200:	09 f4       	brne	.+2      	; 0x204 <increament+0x80>
				new2=0;
 202:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			i=(new1*10)+new2;
 204:	2d 2f       	mov	r18, r29
 206:	22 0f       	add	r18, r18
 208:	82 2f       	mov	r24, r18
 20a:	88 0f       	add	r24, r24
 20c:	88 0f       	add	r24, r24
 20e:	82 0f       	add	r24, r18
 210:	c8 2f       	mov	r28, r24
 212:	c1 0f       	add	r28, r17
			
			if(READ_BIT(PIND,4)==0)
 214:	84 99       	sbic	0x10, 4	; 16
 216:	09 c0       	rjmp	.+18     	; 0x22a <increament+0xa6>
 218:	8f e0       	ldi	r24, 0x0F	; 15
 21a:	97 e2       	ldi	r25, 0x27	; 39
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <increament+0x98>
 220:	00 c0       	rjmp	.+0      	; 0x222 <increament+0x9e>
 222:	00 00       	nop
			{
				_delay_ms(5);
				while (READ_BIT(PIND,4)==0);
 224:	84 9b       	sbis	0x10, 4	; 16
 226:	fe cf       	rjmp	.-4      	; 0x224 <increament+0xa0>
 228:	04 c0       	rjmp	.+8      	; 0x232 <increament+0xae>
	
	while(1)
	{
		SEVEN_SEGMENT_DISPLAY_MLX(i);
		
		for (x=0;x<20;x++)
 22a:	9f 5f       	subi	r25, 0xFF	; 255
 22c:	94 31       	cpi	r25, 0x14	; 20
 22e:	10 f2       	brcs	.-124    	; 0x1b4 <increament+0x30>
 230:	bc cf       	rjmp	.-136    	; 0x1aa <increament+0x26>
 232:	ef e0       	ldi	r30, 0x0F	; 15
 234:	f7 e2       	ldi	r31, 0x27	; 39
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <increament+0xb2>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <increament+0xb8>
 23c:	00 00       	nop
				return i;
			}
		}
	}
	
}
 23e:	8c 2f       	mov	r24, r28
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	08 95       	ret

00000248 <main>:

int main(void)
{
	unsigned char flag=0;
	DDRA=0xff;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
 24c:	87 bb       	out	0x17, r24	; 23
	DDRD=0;
 24e:	11 ba       	out	0x11, r1	; 17
	PORTD=0xff; // << pullup resistor
 250:	82 bb       	out	0x12, r24	; 18
	DDRC=0xff;
 252:	84 bb       	out	0x14, r24	; 20
	PORTC=0;
 254:	15 ba       	out	0x15, r1	; 21
	char x,i=30,new_num=i;
 256:	1e e1       	ldi	r17, 0x1E	; 30
 258:	ce e1       	ldi	r28, 0x1E	; 30
	
}

int main(void)
{
	unsigned char flag=0;
 25a:	00 e0       	ldi	r16, 0x00	; 0
	PORTC=0;
	char x,i=30,new_num=i;
	
	while(1)
	{
		for (x=0;x<50;x++)
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	35 c0       	rjmp	.+106    	; 0x2ca <main+0x82>
		{
			if(READ_BIT(PIND,4)==0)
 260:	84 99       	sbic	0x10, 4	; 16
 262:	13 c0       	rjmp	.+38     	; 0x28a <main+0x42>
 264:	8f e9       	ldi	r24, 0x9F	; 159
 266:	9f e0       	ldi	r25, 0x0F	; 15
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <main+0x20>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x26>
 26e:	00 00       	nop
			{
				_delay_ms(2);
				while (READ_BIT(PIND,4)==0);
 270:	84 9b       	sbis	0x10, 4	; 16
 272:	fe cf       	rjmp	.-4      	; 0x270 <main+0x28>
 274:	8f e9       	ldi	r24, 0x9F	; 159
 276:	9f e0       	ldi	r25, 0x0F	; 15
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x30>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x36>
 27e:	00 00       	nop
				_delay_ms(2);
				new_num=increament(i);
 280:	8c 2f       	mov	r24, r28
 282:	0e 94 c2 00 	call	0x184	; 0x184 <increament>
 286:	c8 2f       	mov	r28, r24
 288:	18 2f       	mov	r17, r24
				i=new_num;
			}
			
			
			SEVEN_SEGMENT_DISPLAY_MLX(i);
 28a:	8c 2f       	mov	r24, r28
 28c:	0e 94 41 00 	call	0x82	; 0x82 <SEVEN_SEGMENT_DISPLAY_MLX>
			
			
			if(READ_BIT(PIND,2)==0)
 290:	82 99       	sbic	0x10, 2	; 16
 292:	09 c0       	rjmp	.+18     	; 0x2a6 <main+0x5e>
 294:	8f e9       	ldi	r24, 0x9F	; 159
 296:	9f e0       	ldi	r25, 0x0F	; 15
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x50>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x56>
 29e:	00 00       	nop
			{
				_delay_ms(2);
				while (READ_BIT(PIND,2)==0);
 2a0:	82 9b       	sbis	0x10, 2	; 16
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <main+0x58>
				flag++;
 2a4:	0f 5f       	subi	r16, 0xFF	; 255
			}
			if(READ_BIT(PIND,3)==0)
 2a6:	83 99       	sbic	0x10, 3	; 16
 2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <main+0x80>
 2aa:	8f e9       	ldi	r24, 0x9F	; 159
 2ac:	9f e0       	ldi	r25, 0x0F	; 15
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x66>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x6c>
 2b4:	00 00       	nop
			{
				_delay_ms(2);
				while (READ_BIT(PIND,3)==0);
 2b6:	83 9b       	sbis	0x10, 3	; 16
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <main+0x6e>
 2ba:	8f e9       	ldi	r24, 0x9F	; 159
 2bc:	9f e0       	ldi	r25, 0x0F	; 15
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x76>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x7c>
 2c4:	00 00       	nop
				_delay_ms(2);
				i=new_num;
 2c6:	c1 2f       	mov	r28, r17
	PORTC=0;
	char x,i=30,new_num=i;
	
	while(1)
	{
		for (x=0;x<50;x++)
 2c8:	df 5f       	subi	r29, 0xFF	; 255
 2ca:	d2 33       	cpi	r29, 0x32	; 50
 2cc:	48 f2       	brcs	.-110    	; 0x260 <main+0x18>
				i=new_num;
			}
			
			
		}
		if(flag%2==0)
 2ce:	00 fd       	sbrc	r16, 0
 2d0:	c5 cf       	rjmp	.-118    	; 0x25c <main+0x14>
		{
			
			i--;
 2d2:	c1 50       	subi	r28, 0x01	; 1
			
			if(i==0)
 2d4:	19 f6       	brne	.-122    	; 0x25c <main+0x14>
			{
				finish();
 2d6:	0e 94 93 00 	call	0x126	; 0x126 <finish>
				
				i=30;
				i=new_num;
 2da:	c1 2f       	mov	r28, r17
 2dc:	bf cf       	rjmp	.-130    	; 0x25c <main+0x14>

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
